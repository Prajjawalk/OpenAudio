{"version":3,"sources":["../src/types/types.ts","../src/services/genreRemixerService.ts","../src/actions/listGenres.ts","../src/index.ts"],"sourcesContent":["import { type IAgentRuntime } from \"@elizaos/core\";\n\n// Configuration for the Genre Remixer API\nexport interface GenreRemixerConfig {\n  apiUrl: string;\n}\n\n// Response from the GET /genres endpoint\nexport interface GenresResponse {\n  genres: string[];\n}\n\n// Response from the POST /remix endpoint\nexport interface RemixResponse {\n  remixedFileUrl: string;\n  originalGenre?: string;\n  targetGenre: string;\n  processingTime?: number;\n}\n\n// Helper function to validate configuration\nexport const validateGenreRemixerConfig = (runtime: IAgentRuntime): GenreRemixerConfig => {\n  const apiUrl = runtime.getSetting(\"GENRE_REMIXER_API_URL\") || \"https://genre-remixer-api.fly.dev\";\n\n  return {\n    apiUrl\n  };\n};\n","// src/services/genreRemixerService.ts\nimport { GenreRemixerConfig, GenresResponse, RemixResponse } from \"../types/types\";\n\nexport const genreRemixerService = (config: GenreRemixerConfig) => {\n  const { apiUrl } = config;\n\n  return {\n    /**\n     * Get a list of available genres for remixing\n     */\n    getGenres: async (): Promise<string[]> => {\n      try {\n        const response = await fetch(`${apiUrl}/genres`);\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch genres: ${response.statusText}`);\n        }\n\n        const data = await response.json() as GenresResponse;\n        return data.genres;\n      } catch (error: any) {\n        console.error(\"Error fetching genres:\", error.message || String(error));\n        throw error;\n      }\n    },\n\n    /**\n     * Remix an audio file to a specific genre\n     * @param audioData - The audio file as a Uint8Array\n     * @param genre - The target genre\n     */\n    remixAudio: async (audioData: Uint8Array, genre: string): Promise<RemixResponse> => {\n      try {\n        const formData = new FormData();\n\n        // Convert buffer to blob\n        const audioBlob = new Blob([audioData], { type: \"audio/wav\" });\n        formData.append(\"file\", audioBlob, \"input.wav\");\n        formData.append(\"genre\", genre);\n\n        const response = await fetch(`${apiUrl}/remix`, {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to remix audio: ${response.statusText}`);\n        }\n\n        return await response.json() as RemixResponse;\n      } catch (error: any) {\n        console.error(\"Error remixing audio:\", error.message || String(error));\n        throw error;\n      }\n    }\n  };\n};\n\nexport default genreRemixerService;\n","// src/actions/listGenres.ts\nimport { Action, IAgentRuntime } from \"@elizaos/core\";\nimport { validateGenreRemixerConfig } from \"../types/types\";\nimport genreRemixerService from \"..//services/genreRemixerService\";\n\nexport const listGenres: Action = {\n  name: \"GENRE_REMIXER_LIST_GENRES\",\n  similes: [\"LIST_AVAILABLE_GENRES\", \"SHOW_MUSIC_GENRES\", \"WHAT_GENRES_ARE_AVAILABLE\"],\n  description: \"Lists all available genres for audio remixing\",\n\n  validate: async (runtime: IAgentRuntime) => {\n    return validateGenreRemixerConfig(runtime) !== null;\n  },\n\n  handler: async (runtime: IAgentRuntime, callback: any) => {\n    try {\n      const config = validateGenreRemixerConfig(runtime);\n      const service = genreRemixerService(config);\n\n      // Fetch available genres\n      const genres = await service.getGenres();\n\n      // Build a nice response\n      const response = `Available genres for remixing:\\n${genres.join(\", \")}`;\n\n    callback?.({\n        text: response,\n        });\n      return true;\n    } catch (error: any) {\n      callback?.({\n        text: `Failed to get available genres: ${error.message || String(error)}`,\n    });\n      return false;\n    }\n  },\n\n  // Example usage of the action\n  examples: [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I want to know all genres for remixing\",\n                action: \"LIST_AVAILABLE_GENRES\",\n            },\n        },\n        {\n            user: \"{{user2}}\",\n            content: {\n                text: \"Can you show me the music genres?\",\n                action: \"SHOW_MUSIC_GENRES\",\n            },\n        },\n        {\n            user: \"{{user3}}\",\n            content: {\n                text: \"What genres are available for remixing?\",\n                action: \"WHAT_GENRES_ARE_AVAILABLE\",\n            },\n        },\n        {\n            user: \"{{user4}}\",\n            content: {\n                text: \"List all available genres for me.\",\n                action: \"LIST_AVAILABLE_GENRES\",\n            },\n        },\n    ],\n  ],\n};\n\nexport default listGenres;\n","export * from \"./actions/listGenres\";\nexport * from \"./actions/remixAudio\";\nexport * from \"./services/genreRemixerService\";\nexport * from \"./types/types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { listGenres } from \"./actions/listGenres\";\n// import { remixAudio } from \"./actions/remixAudio\";\n\nexport const remixPlugin: Plugin = {\n    name: \"story\",\n    description: \"Story integration plugin\",\n    providers: [],\n    evaluators: [],\n    services: [],\n    actions: [\n        listGenres,\n        // remixAudio\n    ],\n};\n\nexport default remixPlugin;\n"],"mappings":"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","names":[]}